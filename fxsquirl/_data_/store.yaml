---
<(META)>:
  docid: '<^[uuid]^>'
  name:
  description: >
  expirary: '<[expiration]>'
  version: '<[version]>'
  path: '<[LEXIvrs]>'
  outline: '<[outline]>'
  authority: 'document|this'
  security: 'sec|lvl2'
  <(WT)>: -32
#Pheonix.Molecule.Store.zz-data_/config.yaml
force:
  yaml: pheonix.molecule.store.orgnql.yamonql
objnql:
  description: >
    Object Notation Query Language provides store for amorphous objects
  file_exts:
    - Load from what file
  types:
    - FILE
  f(x): pheonix.organelle.store.objnql.objnql.document
orgnql:
  description: >
    Organization Notation Query Language provides store for heiarchies
  file_exts:
  types:
   - DIR
   - DB
   - ON
   - MKL
  types_descrip:
    - Directories
    - Database
    - Object Notation
    - Markup Langauage
  f(x):
    - pheonix.organelle.store.orgnql.orgnql.thing
cfg:
  Description: >
    Max attached databases due to limitations of SQLite is 25.  For application
    use there is 1 attached for on disk application, 1 attached for shared
    application, 1 for overall sharing.  This is 3 attachd DBs.  Then each file
    attaches a on disk and an in mem db for each with 10 files creates 23
    attached leaving one for crashing and one additional db.
  active_workbooks:
    max: 10
sectn:
  seq:
    description: >
      Sequence defines the organizations of the sections
    codes:
      000.000:
        name: Grid Sequence
        charaters: arabic
        description: >
          Defines the position of the section within a grid
        symbol: '.'
      000,000:
        name: Simple Linear Sequence
        charaters: arabic
        description: >
          Defines the position of the section within a list
          this provides a posible list of 16,777,216 rows
          281,474,976,711,000 max length rows
        symbol: ','
      000+000:
        name: Page Plus Line Linear Sequence
        charaters: arabic
        description: >
          Define position of the section within a document page
          pageseq+lineseq
        symbol: '+'
        tmplt:
  size:
    description: >
      Section size codes are hexidecimal allowing a total of 8191 named
      chunking methods and a total of 8190 sized chunking methods
    codes:
      000|000:
        name: Templated Defined Chunk
        charaters: hexidecimal
        description: >
          000|001 -> represents a defined encoding of 000 with a
          chunk size of 001 encoding methods and up to a
          chunk size of 4096 rows...allow for adhoc encoding using
          a special rule set config to extend past the 4096 if needed
          and as well this engine should be built so that an overide
          of sectn definitions is even possible
        types:
          defined:
            Description: >
              Chunk Data by a set of defined rules
              i.e. Python method/class seperation
            options:
              'Python':
              'English':
        symbol: '|'
      000.000:
        name: Grid Chunk
        charaters: hexidecimal
        description: >
          001.004 -> represents a column and row chunk size
          up to 4095 columns and 4095 rows use hexidecimal identifiers
          can hold 16,769,025 individiual items in a single chunk
        types:
          table:
            Description: >
              Chunk Data into a table of x cols by y rows
            options:
        symbol: '.'
      000,000:
        name: Simple Linear Chunk
        charaters: arabic
        description: >
          01,002: ->
          represents a chunk size of 1,002 rows
          longest chunk 99,999 use arabic numeral identifiers
        types:
          line:
            Description: >
              Chunk Data into x lines of data
            options:
        symbol: ','
      000^000:
        name: Specialized Named Chunk
        charaters: hexidecimal
        description: >
          001^002: -> implement as a model naming system
          a purely variable chunk size used for highly optimized
          storage provides 16,769,025
          use for things like predefined headers of documents
          and other boilerplate that is larger than a single
          Templated Defined Chunk
        types:
          calculated:
            Description: >
              Chunk Data by a calculated method using
              Machine Learning to Optimize Performance
            options:
        symbol: '^'

appdb:
  tables:
    _doc:
    _opt:
    _sectns:
    _usr:
    _perf:
      Name:
      Description: >
        The _perf Table will hold information that tracks and optimizes
        the performance of the running instance FxSQuRIL
        Track # of transactions by table and db
        store the size of the transactions and the overall size of the db
        try to determine working ranges of data
        some tables maybe large but typically only work with the first x rows
        or most recent or specific view
dbs:
  AppOnDiskDB:
    'tables':
      _cache:
        'name':
        'description': >
        'columns':
          - 'CacheDTID.: TEXT'
          - 'DocUUID.: TEXT'
      '_docs':
        'name': '_doc'
        'description': >
          Store Entries to Organize Sections into a Document allowing for proper formatting
          and versioning for the document sections
          A Doc is a tree of Sectn sequences...the branches provide for different views
          of the same document like values, formulas, formats
        'terms':
          '<[table]>': '_doc'
          '<@[columns]@>':
            - 'histTag.: TEXT'
            - 'Name.: TEXT'
            - 'Seq.: TEXT'
            - 'SectnUUID.: TEXT'
            - 'DTID.: TEXT'
            - 'ownrUUID.: TEXT'
            - '[Group].: TEXT'
      '_msgs':
        'name': '_msg'
        'description': >
          'Handle in app messages for collaboration purposes both human and
          'machine commmunication'
          'A Message will be used to convey information between'
          'copies of the file and users...a seperate mechism of'
          'storage will be used for speed to help with concurrency'
          'syncing across networks'
        'terms':
          '<[table]>': '_msg'
          '<@[columns]@>':
            - 'From.: TEXT'
            - 'To.: TEXT'
            - 'Body.: TEXT'
            - 'Anchor.: TEXT'
            - 'Channel.: TEXT'
            - 'Note.: TEXT'
            - 'State.: TEXT'
      '_opts':
        'name': '_opt'
        'description': >
        'terms':
          '<[table]>': '_opt'
          '<@[columns]@>':
            - '<[table]>UUID.: TEXT'
            - 'Name.: TEXT'
            - '[Table].: TEXT'
            - '<[table]>ID.: INT'
            - 'tblOptionID.: INT'
            - 'Type.: INT'
            - 'Description.: BLOB'
      '_perf':
        'name': '_perf'
        'description': >
          The _perf Table will hold information that tracks and optimizes
          the performance of the running instance FxSQuRIL
          Track # of transactions by table and db
          store the size of the transactions and the overall size of the db
          try to determine working ranges of data
          some tables maybe large but typically only work with the first x rows
          or most recent or specific view
        'tmplt':
          'metrics':
            files:
              -
                name:
                lastOpen:
                lastPath:
            bgTbl:
              size: [cols, rows, versions]
            state: saved, crashed, closed, cleaned
            score: <[session_perf]>
        'terms':
          '<[table]>': '_perf'
          '<@[columns]@>':
            - <[table]>UUID
            - Data
      '_sectns':
        'name':
        'description': >
          A Sectn is a chunk of a document.  A chunk can have 2 dimensions
          rows and columns, these are combinined into a single cell for storage and light
          consumption
        'terms':
          '<[table]>': '_perf'
          '<@[columns]@>':
            - <[table.:UUID UNIQUE]>
      '_usrs':
        'name':
        'description': >
        'terms':
          '<[table]>': '_usr'
          '<@[columns]@>':
            - '<[table.:UUID]>'
            - Name
            - sessionUUID
      '_docbs':
        'name':
        'description': >
        'terms':
          '<[table]>': '_docbs'
          '<@[columns]@>':
            - <[table]>UUID
            - Name
            - sessionUUID
    views:
        DocGroups:
        Docs:
        DocStates:
        FileTypes:
        fullDoc:

inmemdb:
  Name: fxsquril
  tables:
    bigtable:
      name:
      size:
        columns:
          1_ids:
            - 'ID'
            - 'UUID'
            - 'docUUID'
            - 'SectnUUID'
            - 'Name'
            - 'Seq'
            - 'SectnSize'
          3_admins:
            - '[CreBy] INTEGER'
            - '[CreOn] FLOAT'
            - '[ModBY] INTEGER'
            - '[ModOn] FLOAT'
            - '[DLT] BOOLEAN NOT NULL DEFAULT (0)'
            - '[ACTV] BOOLEAN NOT NULL DEFAULT (1)'
          2_content:
            min: 15
            max: 1975
    bigfunction:
      name:
      size:
        columns:
          ids:
          admins:
          content:
    msgtable:
      name:
      size:
        columns:
          ids:
            - msgID
            - msgUUID
          admins:
          content:
            - 'From'
            - 'To'
            - 'Body'
            - 'Anchor'
            - 'Channel'
            - 'Note'
            - 'State'
    opendocs:
      name:
      size:
        columns:
          ids:
          admins:
          content:
    isolatedtables:
      name:
      size:
        columns:
          ids:
          admins:
          content:
    run:
      name:
      size:
        columns:
          ids:
          admins:
          content:
